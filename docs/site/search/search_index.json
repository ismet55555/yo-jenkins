{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to yojenkins Documentation \u00b6 yojenkins is a cross-platform command line interface (CLI) tool to monitor, manage, and have fun with a Jenkins server. It makes it possible to interact with a Jenkins server without using the browser based Jenkins UI. This tool is able to be integrated into a script as middleware in order to automate Jenkins related tasks or enable Jenkins configuration as code. yojenkins will liberate you and your browser from the Jenkins Web UI With yojenkins you can manage: Authentication : Authentication structure similar to AWS CLI Server : Create, shutdown, view queue, and more User accounts : Create, delete, add/remove permission, and more Nodes/agents: Create, delete, shut down server, and more Credentials : Create, update, delete, list, and more Folders: Create items, delete items, disable, enable, and more Jobs: Create, delete, trigger, monitor, search, and more Builds: Monitor, abort, tail logs, follow logs, and more Stages: Get info, get logs, view steps, view status Steps: Get info Other tools and functions: Run groovy scripts remotely, run custom REST calls, setup a shared library, view command usage history, and more See the CLI command outline for yojenkins : CLI Outline Remember This project is in alpha release phase. Please report any issues, odd behavior, or suggestions. Read more about the release cycle . See Bug Reports and Feature Requests This does not mean that this project is not usable. It just means that the project is still in development. Site Content Quick Start Installation Jenkins Plugin Requirements Usage CLI Outline Scripting Examples Bug Report Feature Request Contribute to This Project! Support This Project! License","title":"Home"},{"location":"#welcome-to-yojenkins-documentation","text":"yojenkins is a cross-platform command line interface (CLI) tool to monitor, manage, and have fun with a Jenkins server. It makes it possible to interact with a Jenkins server without using the browser based Jenkins UI. This tool is able to be integrated into a script as middleware in order to automate Jenkins related tasks or enable Jenkins configuration as code. yojenkins will liberate you and your browser from the Jenkins Web UI With yojenkins you can manage: Authentication : Authentication structure similar to AWS CLI Server : Create, shutdown, view queue, and more User accounts : Create, delete, add/remove permission, and more Nodes/agents: Create, delete, shut down server, and more Credentials : Create, update, delete, list, and more Folders: Create items, delete items, disable, enable, and more Jobs: Create, delete, trigger, monitor, search, and more Builds: Monitor, abort, tail logs, follow logs, and more Stages: Get info, get logs, view steps, view status Steps: Get info Other tools and functions: Run groovy scripts remotely, run custom REST calls, setup a shared library, view command usage history, and more See the CLI command outline for yojenkins : CLI Outline Remember This project is in alpha release phase. Please report any issues, odd behavior, or suggestions. Read more about the release cycle . See Bug Reports and Feature Requests This does not mean that this project is not usable. It just means that the project is still in development.","title":"Welcome to yojenkins Documentation"},{"location":"bug_report/","text":"Bug Report \u00b6 As with any other software, issues do come up during various usage scenarios that may not be accounted for during development and testing. Help from real users is enormously helpful. Please report bugs and odd behaviors with: Online at GitHub Issues yojenkins tools bug-report Include --debug Output \u00b6 If possible, when reporting a bug, please include the command that caused the issue in debug mode. You can do this by running the command with the --debug option. This will allow for clearer communication of what was going on and a somewhat easier time resolving the issue. For example, below is the output of a failed yojenkins command in debug mode. Command yojenkins server info --debug Terminal Output [ LOGGING LEVEL ] : DEBUG [ TIME ] [ MS ] [FILENAME : LN] MESSAGE --------------------------------------------------------------------------- [18:49:09] [505 ] [cli_utility.py : 64] Tool version: 0.0.00 [18:49:09] [506 ] [cli_utility.py : 76] System information: [18:49:09] [506 ] [cli_utility.py : 77] - System: Linux [18:49:09] [506 ] [cli_utility.py : 78] - Release: 5.11.0-43-generic [18:49:09] [506 ] [cli_utility.py : 79] - Version: #47~20.04.2-Ubuntu SMP Mon Dec 13 11:06:56 UTC 2021 [18:49:09] [506 ] [cli_utility.py : 80] - Machine: x86_64 [18:49:09] [506 ] [cli_utility.py : 81] - Processor: x86_64 [18:49:09] [506 ] [cli_utility.py : 82] - Python: 3.8.10 [18:49:09] [506 ] [cli_utility.py : 83] - In Docker: False [18:49:09] [507 ] [cli_utility.py : 84] - Bundled: False [18:49:09] [513 ] [utility.py : 94] Loading specified local .json file: '/home/ismet/.yojenkins/history' ... [18:49:09] [515 ] [utility.py : 106] Successfully loaded local .json file [18:49:09] [516 ] [cli_utility.py : 246] Logging command to command history file: \"/home/ismet/.yojenkins/history\" ... [18:49:09] [523 ] [rest.py : 32] Starting new requests session (Type: FuturesSession) ... [18:49:09] [524 ] [auth.py : 334] Successfully found credential file \"credentials\" found in user configuration directory: /home/ismet/.yojenkins [18:49:09] [524 ] [utility.py : 94] Loading specified local .toml file: '/home/ismet/.yojenkins/credentials' ... [18:49:09] [525 ] [utility.py : 106] Successfully loaded local .toml file [18:49:09] [525 ] [auth.py : 371] Number of listed profiles found: 4 [18:49:09] [526 ] [auth.py : 376] Ignoring profiles that do not have at least the following keys: jenkins_server_url, username ... [18:49:09] [526 ] [auth.py : 380] - Profile 1 of 2: \"default\" - OK [18:49:09] [526 ] [auth.py : 380] - Profile 2 of 2: \"testing\" - OK [18:49:09] [526 ] [auth.py : 403] Argument \"--profile\" was not specified [18:49:09] [526 ] [auth.py : 418] Environmental Variable \"YOJENKINS_PROFILE\" not set [18:49:09] [526 ] [auth.py : 426] Successfully found \"default\" profile in the configuration file [18:49:09] [527 ] [auth.py : 447] The following profile has been loaded: [18:49:09] [527 ] [auth.py : 448] - Profile: default [18:49:09] [527 ] [auth.py : 449] - Jenkins Server URL: http://localhost:8080 [18:49:09] [527 ] [auth.py : 450] - Username: admin [18:49:09] [527 ] [auth.py : 502] - API Token: ********************************** [18:49:09] [527 ] [rest.py : 98] Checking if server is reachable: \"http://localhost:8080/login\" ... [18:49:09] [528 ] [rest.py : 157] Request URL: http://localhost:8080/login [18:49:09] [533 ] [rest.py : 221] Failed to make request. Exception: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7effbfcd6c40>: Failed to establish a new connection: [Errno 111] Connection refused')) [18:49:09] [533 ] [rest.py : 110] Failed. Server cannot be reached or is offline Jenkins server connection failed (Server: http://localhost:8080) Possible causes: - Wrong Jenkins server URL: http://localhost:8080 - Network/Internet is down - Server container is down Possible solutions: - Fix yo network connection to server - Check if the server container or container engine is up and running Danger The --debug option is designed such that it will not expose any sensitive information, however please make sure that you censor any shown information that you do not want appear in public!","title":"Bug Report"},{"location":"bug_report/#bug-report","text":"As with any other software, issues do come up during various usage scenarios that may not be accounted for during development and testing. Help from real users is enormously helpful. Please report bugs and odd behaviors with: Online at GitHub Issues yojenkins tools bug-report","title":"Bug Report"},{"location":"bug_report/#include-debug-output","text":"If possible, when reporting a bug, please include the command that caused the issue in debug mode. You can do this by running the command with the --debug option. This will allow for clearer communication of what was going on and a somewhat easier time resolving the issue. For example, below is the output of a failed yojenkins command in debug mode. Command yojenkins server info --debug Terminal Output [ LOGGING LEVEL ] : DEBUG [ TIME ] [ MS ] [FILENAME : LN] MESSAGE --------------------------------------------------------------------------- [18:49:09] [505 ] [cli_utility.py : 64] Tool version: 0.0.00 [18:49:09] [506 ] [cli_utility.py : 76] System information: [18:49:09] [506 ] [cli_utility.py : 77] - System: Linux [18:49:09] [506 ] [cli_utility.py : 78] - Release: 5.11.0-43-generic [18:49:09] [506 ] [cli_utility.py : 79] - Version: #47~20.04.2-Ubuntu SMP Mon Dec 13 11:06:56 UTC 2021 [18:49:09] [506 ] [cli_utility.py : 80] - Machine: x86_64 [18:49:09] [506 ] [cli_utility.py : 81] - Processor: x86_64 [18:49:09] [506 ] [cli_utility.py : 82] - Python: 3.8.10 [18:49:09] [506 ] [cli_utility.py : 83] - In Docker: False [18:49:09] [507 ] [cli_utility.py : 84] - Bundled: False [18:49:09] [513 ] [utility.py : 94] Loading specified local .json file: '/home/ismet/.yojenkins/history' ... [18:49:09] [515 ] [utility.py : 106] Successfully loaded local .json file [18:49:09] [516 ] [cli_utility.py : 246] Logging command to command history file: \"/home/ismet/.yojenkins/history\" ... [18:49:09] [523 ] [rest.py : 32] Starting new requests session (Type: FuturesSession) ... [18:49:09] [524 ] [auth.py : 334] Successfully found credential file \"credentials\" found in user configuration directory: /home/ismet/.yojenkins [18:49:09] [524 ] [utility.py : 94] Loading specified local .toml file: '/home/ismet/.yojenkins/credentials' ... [18:49:09] [525 ] [utility.py : 106] Successfully loaded local .toml file [18:49:09] [525 ] [auth.py : 371] Number of listed profiles found: 4 [18:49:09] [526 ] [auth.py : 376] Ignoring profiles that do not have at least the following keys: jenkins_server_url, username ... [18:49:09] [526 ] [auth.py : 380] - Profile 1 of 2: \"default\" - OK [18:49:09] [526 ] [auth.py : 380] - Profile 2 of 2: \"testing\" - OK [18:49:09] [526 ] [auth.py : 403] Argument \"--profile\" was not specified [18:49:09] [526 ] [auth.py : 418] Environmental Variable \"YOJENKINS_PROFILE\" not set [18:49:09] [526 ] [auth.py : 426] Successfully found \"default\" profile in the configuration file [18:49:09] [527 ] [auth.py : 447] The following profile has been loaded: [18:49:09] [527 ] [auth.py : 448] - Profile: default [18:49:09] [527 ] [auth.py : 449] - Jenkins Server URL: http://localhost:8080 [18:49:09] [527 ] [auth.py : 450] - Username: admin [18:49:09] [527 ] [auth.py : 502] - API Token: ********************************** [18:49:09] [527 ] [rest.py : 98] Checking if server is reachable: \"http://localhost:8080/login\" ... [18:49:09] [528 ] [rest.py : 157] Request URL: http://localhost:8080/login [18:49:09] [533 ] [rest.py : 221] Failed to make request. Exception: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7effbfcd6c40>: Failed to establish a new connection: [Errno 111] Connection refused')) [18:49:09] [533 ] [rest.py : 110] Failed. Server cannot be reached or is offline Jenkins server connection failed (Server: http://localhost:8080) Possible causes: - Wrong Jenkins server URL: http://localhost:8080 - Network/Internet is down - Server container is down Possible solutions: - Fix yo network connection to server - Check if the server container or container engine is up and running Danger The --debug option is designed such that it will not expose any sensitive information, however please make sure that you censor any shown information that you do not want appear in public!","title":"Include --debug Output"},{"location":"cli_outline/","text":"CLI Command Outline \u00b6 Below is a complete outline of the yojenkins CLI command structure. Note As of Version: 0.0.53 yojenkins | |-- account Manage user accounts | |--- create Create a user account | |--- delete Delete a user account | |--- info Get user information | |--- list List all users | |--- password-reset Reset a user password | |--- permission Add or remove user permission | |--- permission-list List all available permissions | | |-- auth Manage authentication and profiles | |--- configure Configure authentication | |--- show Show the local credentials profiles | |--- token Generate authentication API token | |--- user Show current user information | |--- verify Check if credentials can authenticate | |--- wipe Wipe all credentials for this device | | |-- build Manage builds | |--- abort Abort build | |--- browser Open build in web browser | |--- delete Delete build | |--- info Build information | |--- logs Get build logs | |--- monitor Start monitor UI | |--- stages Get build stages | |--- status Build status text/label | | |-- credential Manage credentials | |--- config Get credential configuration | |--- create Create new credentials | |--- delete Remove credentials | |--- get-template Credential type template to create a credential | |--- info Credential information | |--- list List credentials | |--- move Move a credential to another folder/domain | |--- update Reconfigure existing credentials | | |-- folder Manage folders | |--- browser Open folder in web browser | |--- config Get folder configuration | |--- copy Copy an existing item | |--- create Create an item [folder, view, job] | |--- delete Delete folder or view | |--- info Folder information | |--- items List all items in folder | |--- jobs List all jobs in folder | |--- search Search folders by REGEX pattern | |--- subfolders List all subfolders in folder | |--- views List all views in folder | | |-- job Manage jobs | |--- browser Open job in web browser | |--- build Build a job | |--- build-exist Check if build number exists | |--- config Get job configuration | |--- create Create a job | |--- delete Delete job | |--- disable Disable job | |--- enable Enable job | |--- info Job information | |--- last Get previous build number | |--- list List all builds for job | |--- monitor Start monitor UI | |--- next Get next build number | |--- queue-cancel Cancel this job in queue | |--- queue-check Check if this job is in queue | |--- rename Rename job | |--- search Search jobs by REGEX pattern | |--- set Set the next build number | |--- wipe Wipe job workspace | | |-- node Manage nodes | |--- config Get node configuration | |--- create-ephemeral Setup a local or remote ephemeral/as-needed node | |--- create-permanent Setup a local or remote persistent node | |--- delete Delete a node | |--- disable Disable a node | |--- enable Enable a node | |--- info Node information | |--- list List all all nodes | |--- logs Node logs | |--- prepare Prepare a remote machine to become a node | |--- reconfig Reconfigure the node | |--- status Node status | | |-- server Manage server | |--- browser Open server home page in web browser | |--- info Server information | |--- people Show all people/users on server | |--- plugins Show plugin information | |--- queue Show current job build queues on server | |--- quiet Server quite mode enable/disable | |--- reachable Check if server is reachable | |--- restart Restart the server | |--- server-deploy Create a local development server using Docker | |--- server-teardown Remove a local development server | |--- shutdown Shut down the server | | |-- stage Manage build stages | |--- info Stage information | |--- logs Stage steps | |--- status Stage status text | |--- steps Get stage steps | | |-- step Manage stage steps | |--- info Step information | | |-- tools Tools and more |--- bug-report Report a bug |--- docs Open browser to the documentation |--- feature-request Request a feature |--- history Show detailed command usage history |--- rest-request Send a generic Rest request to server |--- run-script Run Groovy script on server, return result |--- shared-lib-setup Set up a Jenkins shared library","title":"CLI Outline"},{"location":"cli_outline/#cli-command-outline","text":"Below is a complete outline of the yojenkins CLI command structure. Note As of Version: 0.0.53 yojenkins | |-- account Manage user accounts | |--- create Create a user account | |--- delete Delete a user account | |--- info Get user information | |--- list List all users | |--- password-reset Reset a user password | |--- permission Add or remove user permission | |--- permission-list List all available permissions | | |-- auth Manage authentication and profiles | |--- configure Configure authentication | |--- show Show the local credentials profiles | |--- token Generate authentication API token | |--- user Show current user information | |--- verify Check if credentials can authenticate | |--- wipe Wipe all credentials for this device | | |-- build Manage builds | |--- abort Abort build | |--- browser Open build in web browser | |--- delete Delete build | |--- info Build information | |--- logs Get build logs | |--- monitor Start monitor UI | |--- stages Get build stages | |--- status Build status text/label | | |-- credential Manage credentials | |--- config Get credential configuration | |--- create Create new credentials | |--- delete Remove credentials | |--- get-template Credential type template to create a credential | |--- info Credential information | |--- list List credentials | |--- move Move a credential to another folder/domain | |--- update Reconfigure existing credentials | | |-- folder Manage folders | |--- browser Open folder in web browser | |--- config Get folder configuration | |--- copy Copy an existing item | |--- create Create an item [folder, view, job] | |--- delete Delete folder or view | |--- info Folder information | |--- items List all items in folder | |--- jobs List all jobs in folder | |--- search Search folders by REGEX pattern | |--- subfolders List all subfolders in folder | |--- views List all views in folder | | |-- job Manage jobs | |--- browser Open job in web browser | |--- build Build a job | |--- build-exist Check if build number exists | |--- config Get job configuration | |--- create Create a job | |--- delete Delete job | |--- disable Disable job | |--- enable Enable job | |--- info Job information | |--- last Get previous build number | |--- list List all builds for job | |--- monitor Start monitor UI | |--- next Get next build number | |--- queue-cancel Cancel this job in queue | |--- queue-check Check if this job is in queue | |--- rename Rename job | |--- search Search jobs by REGEX pattern | |--- set Set the next build number | |--- wipe Wipe job workspace | | |-- node Manage nodes | |--- config Get node configuration | |--- create-ephemeral Setup a local or remote ephemeral/as-needed node | |--- create-permanent Setup a local or remote persistent node | |--- delete Delete a node | |--- disable Disable a node | |--- enable Enable a node | |--- info Node information | |--- list List all all nodes | |--- logs Node logs | |--- prepare Prepare a remote machine to become a node | |--- reconfig Reconfigure the node | |--- status Node status | | |-- server Manage server | |--- browser Open server home page in web browser | |--- info Server information | |--- people Show all people/users on server | |--- plugins Show plugin information | |--- queue Show current job build queues on server | |--- quiet Server quite mode enable/disable | |--- reachable Check if server is reachable | |--- restart Restart the server | |--- server-deploy Create a local development server using Docker | |--- server-teardown Remove a local development server | |--- shutdown Shut down the server | | |-- stage Manage build stages | |--- info Stage information | |--- logs Stage steps | |--- status Stage status text | |--- steps Get stage steps | | |-- step Manage stage steps | |--- info Step information | | |-- tools Tools and more |--- bug-report Report a bug |--- docs Open browser to the documentation |--- feature-request Request a feature |--- history Show detailed command usage history |--- rest-request Send a generic Rest request to server |--- run-script Run Groovy script on server, return result |--- shared-lib-setup Set up a Jenkins shared library","title":"CLI Command Outline"},{"location":"contribute/","text":"Contribute to This Project \u00b6 yojenkins is a Python project that is an on-going effort, slowly adding various features and improvements. If you would like to contribute, please fork the project, make your changes, and submit a pull request. Big Thank You Any help, ideas, or user testing is much appreciated! There is definitely work to be done. If you spot an issue you are able to fix, or if you are eying a open issue or feature request, feel free to submit some code. For guides and information on how to get started and help out, check out the various sections on this page. Contribute to This Project Roadmap Forking and Locally Cloning Project Environment Setup Making Changes Adding New Dependencies Formatting and Linting Unit Testing Documentation Layout Live Server for Preview Building the Documentation Visual Studio Code Setup (Optional) Extensions VS Code Settings Changing Settings Settings to Change Contributors Roadmap \u00b6 Note The roadmap is currently in flux and is yet to be refined Please see the TODO and FIXME kanban board for this projects on GitHub TODO - Any currently outstanding tasks FIXME - Any known issues Forking and Locally Cloning Project \u00b6 The purpose of forking this project GitHub repository is to create a local copy of the project, make changes to it, and submit a pull request of your work into the original repository. Here is a guide by GitHub on how to fork and clone a project: Fork and Clone a GitHub Repository Environment Setup \u00b6 The following steps assume that you have successfully cloned the project and are in the root directory of the project. Add the system dependencies, if applicable Platform Command MacOS and Windows Not needed Ubuntu sudo apt update && apt-get install -y python3-dev python3-pip libasound2-dev CentOS sudo yum update && yum install -y python3-devel gcc alsa-lib-devel Ensure Python is installed and is a compatible version for this project python --version If it is not, install it: Guide Ensure that pip is installed pip --version If it is not, install it: Guide Upgrade tooling and install pipenv python -m pip install --upgrade pip setuptools wheel virtualenv pipenv With pipenv , set up the development virtual environment pipenv sync --three --dev Get into (activate) the virtual environment pipenv shell Test if yojenkins starts up without any errors yojenkins --help Making Changes \u00b6 git This project uses the \"trunk-based\" git version control workflow. Each time you make a change, you should create a new branch and push your changes to the main branch. These days you do not have to be a git terminal master in order to get going with a git source controlled project. Depending on your preferences, there are many visual UI-based git clients such as GitHub Desktop , SourceTree , or even through the Visual Studio Code IDE. Create a new git branch form the main branch git checkout main git pull git checkout -b <YOUR NEW GIT BRANCH NAME> Activate/Enter the virtual environment pipenv shell Make your changes to the project Run the changes yojenkins - This works because the current package is marked as editable in Pipfile python yojenkins/__main__py - This is effectively what is run when running yojenkins Stage the changes git add . Run pre-commit (See section below) pre-commit run Stage and commit the changes git commit -m \"<YOUR GIT COMMIT MESSAGE>\" Once all your changes and commits are complete, increment and tag the build version of yojenkins bumpversion patch Push changes to your development branch git push origin <YOUR NEW GIT BRANCH NAME> On GitHub, open a new pull request into the original repository Adding New Dependencies \u00b6 Sometimes a new Python dependency is required for the project. In these cases, you can add dependencies as follows: Add the dependency to Pipfile Lock the dependency in Pipfile.lock pipenv lock --clear Update requirements.txt with the new dependency and its version Typically you can find it inside Pipfile.lock Caution Some dependencies are exclusive to a specific Operating system (ie. Windows). Make sure to specify these appropriately as seen with other dependencies. Formatting and Linting \u00b6 Both, formatting and linting are standardized and automated using pre-commit . pre-commit is a tool that runs a set of predefined tasks and checks on your code when you run git commit . This projects holds a .pre-commit-config.yaml file, which dictates which tasks are run. Currently, this file outlines the following tasks and checks: Remove any trailing whitespace Fix end of the file with a newline Check if Python docstrings are listed first Check JSON file formatting Check YAML file formatting Check TOML file formatting Check if tests have the right naming Python Code Formatting (yapf) Python Imports Sorting (isort) Python Code Linting (pylint) You can manually run these checks by running pre-commit run , or you can add the pre-commit command to your .git/hooks/pre-commit file by running pre-commit install . This adding a git hook is a good way to make sure your code is formatted and linted before you commit. Note pre-commit will only run on files that have been staged. However, if you want to run pre-commit on the entire project, you can run pre-commit run --all-files Note Make sure you have the project's virtual environment activated before running the checks. The workflow for running pre-commit checks is typically as follows: Make and finish up code changes Stage the changes with git add . Run pre-commit run Stage any changes made by pre-commit Commit the staged changes with git commit Unit Testing \u00b6 Currently, there are no unit tests. This big tech debt is mainly caused by the the focus so far being on the development of yojenkins and its various features. However, the outline of a unit test framework is in place. The directory tests holds the outline of a pytest framework. Adding unit tests to the various functions, classes, methods, and the CLI tool as a whole is deeply needed. Documentation \u00b6 This project uses mkdocs to generate documentation. mkdocs is a static site generator that is used to generate documentation for this project. To learn more about mkdocs , check out its documentation . Layout \u00b6 In this project, all work related to documentation is inside the docs directory as follows: docs/ |-- site/ |-- source/ |-- index.md |-- contributing.md |-- <etc> |-- mkdocs.yml site/ is the directory where the documentation will be generated. Anything inside this directory is not touched by anyone directly. source/ is the directory where the documentation source files are located. This directory holds all the files that will be edited and used to generate the documentation. mkdocs.yml is the configuration file for mkdocs . Most content inside this file is fairly constant except the nav section, which may changes if a new site is added. Live Server for Preview \u00b6 While editing and working with the documentation, you may want to preview the documentation in real time as you change it. mkdocs offers a live server feature that will automatically rebuild the documentation when you save a file. In order to start this live server Open a terminal and navigate to the docs directory. Inside docs , run the following command: mkdocs serve Open a browser and navigate to http://127.0.0.1:8000 to actively view your changes Building the Documentation \u00b6 The documentation is built using mkdocs , whcih will use the source directory and the mkdocs.yml configuration file. Open a terminal and navigate to the docs directory. Inside docs , run the following command: mkdocs build Watch out for any warnings or errors that may need to be fixed. Note Currently the documentation is build manullly using the mkdocs command. However, future plans adding this task to GitHub Actions to automate the build process. Visual Studio Code Setup (Optional) \u00b6 Here included are some general suggestions for setting up your VS Code environment in order to operate and contribute on this project. The main reason for including this section is to encourage even beginner level developers to hopefully contribute to this project. Note This entire section is a mare suggestions. Developers can be picky about their tools and everyone tends to have their own ways of doing things Extensions \u00b6 Python - General Python Language Support Better TOML - TOML Language Support YAML - YAML Language Support XML - XML Language Support Markdown Preview Enhancements - Live Markdown File Preview Git Graph - Clear view of git history GitLens - All kinds of useful git tools Pylance - Code assistance for Python Visual Studio IntelliCode - Code assistance for Visual Studio Path Intellisense - Auto-complete for paths in code Docker - Manage docker containers within VS Code VS Code Settings \u00b6 Changing Settings \u00b6 VS Code setting can be changed by editing the settings JSON file. Note When adding or removing JSON settings, do not forget to add commas and quotes appropriately as all the other settings are formatted in the JSON. User Settings Settings applied globally to the user To edit: Ctrl + Shift + P type: Preferences: Open Settings (JSON) Workspace Settings Settings applied for a current workspace or project To edit: Ctrl + Shift + P type: Preferences: Open Workspace Settings (JSON) Settings to Change \u00b6 Show .git directory in the file tree \"files.exclude\": { \"**/.git\": false } Increase terminal scroll back history \"terminal.integrated.scrollback\": 5000, Increase the visibility of scroll bars \"editor.scrollbar.verticalScrollbarSize\": 30, \"editor.scrollbar.horizontal\": \"visible\", \"editor.scrollbar.horizontalScrollbarSize\": 30, Add a Vertical Line at Line Length / Column Position \"editor.rulers\": [100], Contributors \u00b6 Ismet Hand\u017ei\u0107 : GitHub: @ismet55555","title":"Contribute to This Project!"},{"location":"contribute/#contribute-to-this-project","text":"yojenkins is a Python project that is an on-going effort, slowly adding various features and improvements. If you would like to contribute, please fork the project, make your changes, and submit a pull request. Big Thank You Any help, ideas, or user testing is much appreciated! There is definitely work to be done. If you spot an issue you are able to fix, or if you are eying a open issue or feature request, feel free to submit some code. For guides and information on how to get started and help out, check out the various sections on this page. Contribute to This Project Roadmap Forking and Locally Cloning Project Environment Setup Making Changes Adding New Dependencies Formatting and Linting Unit Testing Documentation Layout Live Server for Preview Building the Documentation Visual Studio Code Setup (Optional) Extensions VS Code Settings Changing Settings Settings to Change Contributors","title":"Contribute to This Project"},{"location":"contribute/#roadmap","text":"Note The roadmap is currently in flux and is yet to be refined Please see the TODO and FIXME kanban board for this projects on GitHub TODO - Any currently outstanding tasks FIXME - Any known issues","title":"Roadmap"},{"location":"contribute/#forking-and-locally-cloning-project","text":"The purpose of forking this project GitHub repository is to create a local copy of the project, make changes to it, and submit a pull request of your work into the original repository. Here is a guide by GitHub on how to fork and clone a project: Fork and Clone a GitHub Repository","title":"Forking and Locally Cloning Project"},{"location":"contribute/#environment-setup","text":"The following steps assume that you have successfully cloned the project and are in the root directory of the project. Add the system dependencies, if applicable Platform Command MacOS and Windows Not needed Ubuntu sudo apt update && apt-get install -y python3-dev python3-pip libasound2-dev CentOS sudo yum update && yum install -y python3-devel gcc alsa-lib-devel Ensure Python is installed and is a compatible version for this project python --version If it is not, install it: Guide Ensure that pip is installed pip --version If it is not, install it: Guide Upgrade tooling and install pipenv python -m pip install --upgrade pip setuptools wheel virtualenv pipenv With pipenv , set up the development virtual environment pipenv sync --three --dev Get into (activate) the virtual environment pipenv shell Test if yojenkins starts up without any errors yojenkins --help","title":"Environment Setup"},{"location":"contribute/#making-changes","text":"git This project uses the \"trunk-based\" git version control workflow. Each time you make a change, you should create a new branch and push your changes to the main branch. These days you do not have to be a git terminal master in order to get going with a git source controlled project. Depending on your preferences, there are many visual UI-based git clients such as GitHub Desktop , SourceTree , or even through the Visual Studio Code IDE. Create a new git branch form the main branch git checkout main git pull git checkout -b <YOUR NEW GIT BRANCH NAME> Activate/Enter the virtual environment pipenv shell Make your changes to the project Run the changes yojenkins - This works because the current package is marked as editable in Pipfile python yojenkins/__main__py - This is effectively what is run when running yojenkins Stage the changes git add . Run pre-commit (See section below) pre-commit run Stage and commit the changes git commit -m \"<YOUR GIT COMMIT MESSAGE>\" Once all your changes and commits are complete, increment and tag the build version of yojenkins bumpversion patch Push changes to your development branch git push origin <YOUR NEW GIT BRANCH NAME> On GitHub, open a new pull request into the original repository","title":"Making Changes"},{"location":"contribute/#adding-new-dependencies","text":"Sometimes a new Python dependency is required for the project. In these cases, you can add dependencies as follows: Add the dependency to Pipfile Lock the dependency in Pipfile.lock pipenv lock --clear Update requirements.txt with the new dependency and its version Typically you can find it inside Pipfile.lock Caution Some dependencies are exclusive to a specific Operating system (ie. Windows). Make sure to specify these appropriately as seen with other dependencies.","title":"Adding New Dependencies"},{"location":"contribute/#formatting-and-linting","text":"Both, formatting and linting are standardized and automated using pre-commit . pre-commit is a tool that runs a set of predefined tasks and checks on your code when you run git commit . This projects holds a .pre-commit-config.yaml file, which dictates which tasks are run. Currently, this file outlines the following tasks and checks: Remove any trailing whitespace Fix end of the file with a newline Check if Python docstrings are listed first Check JSON file formatting Check YAML file formatting Check TOML file formatting Check if tests have the right naming Python Code Formatting (yapf) Python Imports Sorting (isort) Python Code Linting (pylint) You can manually run these checks by running pre-commit run , or you can add the pre-commit command to your .git/hooks/pre-commit file by running pre-commit install . This adding a git hook is a good way to make sure your code is formatted and linted before you commit. Note pre-commit will only run on files that have been staged. However, if you want to run pre-commit on the entire project, you can run pre-commit run --all-files Note Make sure you have the project's virtual environment activated before running the checks. The workflow for running pre-commit checks is typically as follows: Make and finish up code changes Stage the changes with git add . Run pre-commit run Stage any changes made by pre-commit Commit the staged changes with git commit","title":"Formatting and Linting"},{"location":"contribute/#unit-testing","text":"Currently, there are no unit tests. This big tech debt is mainly caused by the the focus so far being on the development of yojenkins and its various features. However, the outline of a unit test framework is in place. The directory tests holds the outline of a pytest framework. Adding unit tests to the various functions, classes, methods, and the CLI tool as a whole is deeply needed.","title":"Unit Testing"},{"location":"contribute/#documentation","text":"This project uses mkdocs to generate documentation. mkdocs is a static site generator that is used to generate documentation for this project. To learn more about mkdocs , check out its documentation .","title":"Documentation"},{"location":"contribute/#layout","text":"In this project, all work related to documentation is inside the docs directory as follows: docs/ |-- site/ |-- source/ |-- index.md |-- contributing.md |-- <etc> |-- mkdocs.yml site/ is the directory where the documentation will be generated. Anything inside this directory is not touched by anyone directly. source/ is the directory where the documentation source files are located. This directory holds all the files that will be edited and used to generate the documentation. mkdocs.yml is the configuration file for mkdocs . Most content inside this file is fairly constant except the nav section, which may changes if a new site is added.","title":"Layout"},{"location":"contribute/#live-server-for-preview","text":"While editing and working with the documentation, you may want to preview the documentation in real time as you change it. mkdocs offers a live server feature that will automatically rebuild the documentation when you save a file. In order to start this live server Open a terminal and navigate to the docs directory. Inside docs , run the following command: mkdocs serve Open a browser and navigate to http://127.0.0.1:8000 to actively view your changes","title":"Live Server for Preview"},{"location":"contribute/#building-the-documentation","text":"The documentation is built using mkdocs , whcih will use the source directory and the mkdocs.yml configuration file. Open a terminal and navigate to the docs directory. Inside docs , run the following command: mkdocs build Watch out for any warnings or errors that may need to be fixed. Note Currently the documentation is build manullly using the mkdocs command. However, future plans adding this task to GitHub Actions to automate the build process.","title":"Building the Documentation"},{"location":"contribute/#visual-studio-code-setup-optional","text":"Here included are some general suggestions for setting up your VS Code environment in order to operate and contribute on this project. The main reason for including this section is to encourage even beginner level developers to hopefully contribute to this project. Note This entire section is a mare suggestions. Developers can be picky about their tools and everyone tends to have their own ways of doing things","title":"Visual Studio Code Setup (Optional)"},{"location":"contribute/#extensions","text":"Python - General Python Language Support Better TOML - TOML Language Support YAML - YAML Language Support XML - XML Language Support Markdown Preview Enhancements - Live Markdown File Preview Git Graph - Clear view of git history GitLens - All kinds of useful git tools Pylance - Code assistance for Python Visual Studio IntelliCode - Code assistance for Visual Studio Path Intellisense - Auto-complete for paths in code Docker - Manage docker containers within VS Code","title":"Extensions"},{"location":"contribute/#vs-code-settings","text":"","title":"VS Code Settings"},{"location":"contribute/#changing-settings","text":"VS Code setting can be changed by editing the settings JSON file. Note When adding or removing JSON settings, do not forget to add commas and quotes appropriately as all the other settings are formatted in the JSON. User Settings Settings applied globally to the user To edit: Ctrl + Shift + P type: Preferences: Open Settings (JSON) Workspace Settings Settings applied for a current workspace or project To edit: Ctrl + Shift + P type: Preferences: Open Workspace Settings (JSON)","title":"Changing Settings"},{"location":"contribute/#settings-to-change","text":"Show .git directory in the file tree \"files.exclude\": { \"**/.git\": false } Increase terminal scroll back history \"terminal.integrated.scrollback\": 5000, Increase the visibility of scroll bars \"editor.scrollbar.verticalScrollbarSize\": 30, \"editor.scrollbar.horizontal\": \"visible\", \"editor.scrollbar.horizontalScrollbarSize\": 30, Add a Vertical Line at Line Length / Column Position \"editor.rulers\": [100],","title":"Settings to Change"},{"location":"contribute/#contributors","text":"Ismet Hand\u017ei\u0107 : GitHub: @ismet55555","title":"Contributors"},{"location":"docker_install/","text":"Docker Installation Guide \u00b6 This document outlines how to install Docker on various operating systems. MacOS \u00b6 Either of these following options will install Docker in your MacOS system: Docker Desktop installation Using homebrew ( brew ) package manager brew cask install docker Windows \u00b6 Either of these following options will install Docker in your Windows system: Docker Desktop installation Using Chocolatey package manager choco install docker-desktop Ubuntu \u00b6 Run the following commands in order to install Docker in your Ubuntu system: sudo apt install docker.io sudo systemctl start docker sudo systemctl enable docker CentOS / AmazonLinux2 \u00b6 Run the following commands in order to install Docker in your CentOS / AmazonLinux2 system: sudo amazon-linux-extras install -y docker sudo yum install -y docker sudo service docker start sudo usermod -a -G docker <YOUR USERNAME>","title":"Docker Installation Guide"},{"location":"docker_install/#docker-installation-guide","text":"This document outlines how to install Docker on various operating systems.","title":"Docker Installation Guide"},{"location":"docker_install/#macos","text":"Either of these following options will install Docker in your MacOS system: Docker Desktop installation Using homebrew ( brew ) package manager brew cask install docker","title":"MacOS"},{"location":"docker_install/#windows","text":"Either of these following options will install Docker in your Windows system: Docker Desktop installation Using Chocolatey package manager choco install docker-desktop","title":"Windows"},{"location":"docker_install/#ubuntu","text":"Run the following commands in order to install Docker in your Ubuntu system: sudo apt install docker.io sudo systemctl start docker sudo systemctl enable docker","title":"Ubuntu"},{"location":"docker_install/#centos-amazonlinux2","text":"Run the following commands in order to install Docker in your CentOS / AmazonLinux2 system: sudo amazon-linux-extras install -y docker sudo yum install -y docker sudo service docker start sudo usermod -a -G docker <YOUR USERNAME>","title":"CentOS / AmazonLinux2"},{"location":"feature_request/","text":"Feature Request \u00b6 This is a very young project, and we are always looking for new features and improvements. Please feel free to open an issue and suggest a feature. Please include as much information as possible. Online at GitHub Feature Request yojenkins tools feature-request","title":"Feature Request"},{"location":"feature_request/#feature-request","text":"This is a very young project, and we are always looking for new features and improvements. Please feel free to open an issue and suggest a feature. Please include as much information as possible. Online at GitHub Feature Request yojenkins tools feature-request","title":"Feature Request"},{"location":"installation/","text":"Installation \u00b6 Installation System Dependencies For Sound Install From Python Package Index (PYPI) Using pip (Recommended) Install Using the Included setup.py Download Pre-compiled Binary System Dependencies For Sound \u00b6 The following system dependencies are needed for yojenkins to be able to play sound effects. Sound effects are used for job and build monitor. If you do not install these dependencies, yojenkins will still be able to function, however it will not play any sound effects. Platform Command MacOS and Windows Not needed Ubuntu sudo apt update && apt-get install -y python3-dev python3-pip libasound2-dev CentOS sudo yum update && yum install -y python3-devel gcc alsa-lib-devel Install From Python Package Index (PYPI) Using pip (Recommended) \u00b6 Ensure internet connection Open up a terminal on your computer Ensure python is installed and has compatible version python --version If it is not, install it: Guide Ensure that pip is installed pip --version If it is not, install it: Guide Install yojenkins from PYPI pip install yojenkins Install Using the Included setup.py \u00b6 Download/Clone this entire yojenkins GitHub repository Copy it to some temporary location on the computer you wish to install yojenkins on (ie. Downloads) Open up a terminal on your computer Use the cd and cd .. command to change directory into the new yojenkins directory Example: cd /home/username/Downloads/yojenkins Ensure python is installed and has compatible version python --version If it is not, install it: Guide Ensure that pip is installed pip --version If it is not, install it: Guide Ensure that pip , setuptools , wheel are installed an up to date python -m pip install --upgrade pip setuptools wheel Install yojenkins from PYPI python setup.py install Download Pre-compiled Binary \u00b6 Go to the releases page of the yojenkins GitHub repository: Releases Page If available, download the latest pre-compiled binary for your operating system Example: yojenkins-0.0.00-linux-x86_64 , for Linux OS 64-bit Architecture Move the binary to the a place where you can access it from the command line (ie. on PATH ) Note Not all operating systems and architectures are supported. As of now, only select and/or popular ones are.","title":"Installation"},{"location":"installation/#installation","text":"Installation System Dependencies For Sound Install From Python Package Index (PYPI) Using pip (Recommended) Install Using the Included setup.py Download Pre-compiled Binary","title":"Installation"},{"location":"installation/#system-dependencies-for-sound","text":"The following system dependencies are needed for yojenkins to be able to play sound effects. Sound effects are used for job and build monitor. If you do not install these dependencies, yojenkins will still be able to function, however it will not play any sound effects. Platform Command MacOS and Windows Not needed Ubuntu sudo apt update && apt-get install -y python3-dev python3-pip libasound2-dev CentOS sudo yum update && yum install -y python3-devel gcc alsa-lib-devel","title":"System Dependencies For Sound"},{"location":"installation/#install-from-python-package-index-pypi-using-pip-recommended","text":"Ensure internet connection Open up a terminal on your computer Ensure python is installed and has compatible version python --version If it is not, install it: Guide Ensure that pip is installed pip --version If it is not, install it: Guide Install yojenkins from PYPI pip install yojenkins","title":"Install From Python Package Index (PYPI) Using pip (Recommended)"},{"location":"installation/#install-using-the-included-setuppy","text":"Download/Clone this entire yojenkins GitHub repository Copy it to some temporary location on the computer you wish to install yojenkins on (ie. Downloads) Open up a terminal on your computer Use the cd and cd .. command to change directory into the new yojenkins directory Example: cd /home/username/Downloads/yojenkins Ensure python is installed and has compatible version python --version If it is not, install it: Guide Ensure that pip is installed pip --version If it is not, install it: Guide Ensure that pip , setuptools , wheel are installed an up to date python -m pip install --upgrade pip setuptools wheel Install yojenkins from PYPI python setup.py install","title":"Install Using the Included setup.py"},{"location":"installation/#download-pre-compiled-binary","text":"Go to the releases page of the yojenkins GitHub repository: Releases Page If available, download the latest pre-compiled binary for your operating system Example: yojenkins-0.0.00-linux-x86_64 , for Linux OS 64-bit Architecture Move the binary to the a place where you can access it from the command line (ie. on PATH ) Note Not all operating systems and architectures are supported. As of now, only select and/or popular ones are.","title":"Download Pre-compiled Binary"},{"location":"license/","text":"License \u00b6 GNU GENERAL PUBLIC LICENSE - Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. License Preamble Terms and Conditions 0. Definitions 1. Source Code 2. Basic Permissions. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. 4. Conveying Verbatim Copies. 5. Conveying Modified Source Versions. 6. Conveying Non-Source Forms. 7. Additional Terms. 8. Termination. 9. Acceptance Not Required for Having Copies. 10. Automatic Licensing of Downstream Recipients. 11. Patents. 12. No Surrender of Others' Freedom. 13. Use with the GNU Affero General Public License. 14. Revised Versions of this License. 15. Disclaimer of Warranty. 16. Limitation of Liability. 17. Interpretation of Sections 15 and 16. How to Apply These Terms to Your New Programs Preamble \u00b6 The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. Terms and Conditions \u00b6 0. Definitions \u00b6 \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code \u00b6 The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. \u00b6 All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. \u00b6 No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. \u00b6 You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. \u00b6 You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. \u00b6 You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u00b6 \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. \u00b6 You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. \u00b6 You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. \u00b6 Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. \u00b6 A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. \u00b6 If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. \u00b6 Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. \u00b6 The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. \u00b6 THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. \u00b6 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. \u00b6 If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs \u00b6 If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. Note yojenkins - A command line interface tool for Jenkins server Copyright (C) 2022 Ismet Handzic` This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see https://www.gnu.org/licenses/ . Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: Note yojenkins Copyright (C) 2022 ISMET HANDZIC This program comes with ABSOLUTELY NO WARRANTY; for details type \"show w\". This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"License"},{"location":"license/#license","text":"GNU GENERAL PUBLIC LICENSE - Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. License Preamble Terms and Conditions 0. Definitions 1. Source Code 2. Basic Permissions. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. 4. Conveying Verbatim Copies. 5. Conveying Modified Source Versions. 6. Conveying Non-Source Forms. 7. Additional Terms. 8. Termination. 9. Acceptance Not Required for Having Copies. 10. Automatic Licensing of Downstream Recipients. 11. Patents. 12. No Surrender of Others' Freedom. 13. Use with the GNU Affero General Public License. 14. Revised Versions of this License. 15. Disclaimer of Warranty. 16. Limitation of Liability. 17. Interpretation of Sections 15 and 16. How to Apply These Terms to Your New Programs","title":"License"},{"location":"license/#preamble","text":"The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"license/#terms-and-conditions","text":"","title":"Terms and Conditions"},{"location":"license/#0-definitions","text":"\"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions"},{"location":"license/#1-source-code","text":"The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code"},{"location":"license/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions."},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law."},{"location":"license/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies."},{"location":"license/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions."},{"location":"license/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms."},{"location":"license/#7-additional-terms","text":"\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms."},{"location":"license/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination."},{"location":"license/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies."},{"location":"license/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients."},{"location":"license/#11-patents","text":"A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents."},{"location":"license/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom."},{"location":"license/#13-use-with-the-gnu-affero-general-public-license","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.","title":"13. Use with the GNU Affero General Public License."},{"location":"license/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License."},{"location":"license/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty."},{"location":"license/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability."},{"location":"license/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16."},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. Note yojenkins - A command line interface tool for Jenkins server Copyright (C) 2022 Ismet Handzic` This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see https://www.gnu.org/licenses/ . Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: Note yojenkins Copyright (C) 2022 ISMET HANDZIC This program comes with ABSOLUTELY NO WARRANTY; for details type \"show w\". This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"How to Apply These Terms to Your New Programs"},{"location":"quick_start/","text":"Quick Start \u00b6 The following is a quick start guide to get going with the yojenkins command line tool. This guide assumes that yojenkins is installed and available on your system. (Optional) Start up a containerized local Jenkins server using Docker yojenkins server server-deploy Configure your first profile. Profiles are stored in the home directory in .yojenkins yojenkins auth configure Generate a Jenkins server API token and add it to your first profile yojenkins auth token --profile <PROFILE NAME> Verify that you can access the Jenkins server yojenkins auth verify Now start trying some things ... Get sever info: yojenkins server info Get your user info: yojenkins auth user --pretty Search a job: yojenkins job search some-job-name --fullname --yaml --list Monitor a build: yojenkins build monitor some-job-name --latest --sound","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"The following is a quick start guide to get going with the yojenkins command line tool. This guide assumes that yojenkins is installed and available on your system. (Optional) Start up a containerized local Jenkins server using Docker yojenkins server server-deploy Configure your first profile. Profiles are stored in the home directory in .yojenkins yojenkins auth configure Generate a Jenkins server API token and add it to your first profile yojenkins auth token --profile <PROFILE NAME> Verify that you can access the Jenkins server yojenkins auth verify Now start trying some things ... Get sever info: yojenkins server info Get your user info: yojenkins auth user --pretty Search a job: yojenkins job search some-job-name --fullname --yaml --list Monitor a build: yojenkins build monitor some-job-name --latest --sound","title":"Quick Start"},{"location":"requirements/","text":"Jenkins Plugin Requirements \u00b6 If you are using yojenkins on a pre-existing Jenkins server, make sure that the following Jenkins plugin are installed for yojenkins to use all its functionalities. However, these plugins tend to be installed by default. Folders (cloudbees-folder) Next Build Number (next-build-number) Promoted Builds (promoted-builds) Role-based Authorization Strategy (role-strategy) GitHub Branch Source Plugin (github-branch-source) In order to check if a Jenkins plugin is installed, or to install a plugin, you can: In the Jenkins web user interface, go to Manage Jenkins > Manage Plugins > Installed OR Available yojenkins server plugins --pretty --list","title":"Jenkins Plugin Requirements"},{"location":"requirements/#jenkins-plugin-requirements","text":"If you are using yojenkins on a pre-existing Jenkins server, make sure that the following Jenkins plugin are installed for yojenkins to use all its functionalities. However, these plugins tend to be installed by default. Folders (cloudbees-folder) Next Build Number (next-build-number) Promoted Builds (promoted-builds) Role-based Authorization Strategy (role-strategy) GitHub Branch Source Plugin (github-branch-source) In order to check if a Jenkins plugin is installed, or to install a plugin, you can: In the Jenkins web user interface, go to Manage Jenkins > Manage Plugins > Installed OR Available yojenkins server plugins --pretty --list","title":"Jenkins Plugin Requirements"},{"location":"scripting_examples/","text":"Scripting Examples \u00b6 Scripting Examples Example 1 - Create job, wait for build, search logs Example 2 - Create folder, job, wait for build, and delete Example 3 - Search for job on two servers, delete if found Example 4 - Creating a User Example 5 - Creating a Credential Example 6 - Add a Permission to All Users Example 7 - Find a User with a Specific Permission Note For clarity, all of the following script examples are for simplified use cases. More advanced use cases may require additional logic and error handling. Example 1 - Create job, wait for build, search logs \u00b6 Here we use a bash script with yojenkins to do the following: Create a new job using a predefined JSON configuration file Start a new build for the job Wait 12 seconds for the build to start and finish Search the build log for the string \"Hello beautiful world!\" Tip Within the job configuration XML definition, notice how variable usage is escaped with \\ to avoid variable interpretation. Here specifically, using $VARIABLE instead of \\$VARIABLE would cause the variable to be interpreted as a local variable name and not as a string. Code #!/bin/bash JOB_NAME=\"Example Job\" SEARCH_TEXT=\"Hello world\" # Define the Job configuration cat > EXAMPLE_JOB_CONFIG.xml << EOF <?xml version='1.1' encoding='UTF-8'?> <project> <scm class=\"hudson.scm.NullSCM\" /> <builders> <hudson.tasks.Shell> <command> for VARIABLE in \"yall\" \"people\" \"world\" do echo \"Hello \\$VARIABLE\" done </command> <configuredLocalRules /> </hudson.tasks.Shell> </builders> </project> EOF echo echo \"Creating '$JOB_NAME' job in Jenkins root folder ...\" yojenkins job create \\ --config-file EXAMPLE_JOB_CONFIG.xml \\ \"$JOB_NAME\" . echo echo \"Building '$JOB_NAME' job ...\" yojenkins job build \"$JOB_NAME\" echo echo \"Waiting 12 seconds for job to build and complete ...\" sleep 12 echo echo \"Checking build logs for substring '$SEARCH_TEXT' ...\" BUILD_LOGS=$(yojenkins build logs \"$JOB_NAME\" --latest) if [[ \"$BUILD_LOGS\" == *\"$SEARCH_TEXT\"* ]]; then echo \"Successfully found text '$SEARCH_TEXT' in build logs\" else echo \"Failed to find text '$SEARCH_TEXT' in build logs\" exit 1 fi Output Creating 'Example Job' job in Jenkins root folder ... success Building 'Example Job' job ... success. queue number: 131 Waiting 12 seconds for job to build and complete ... Checking build logs for substring 'Hello world' ... Successfully found text 'Hello world'! Example 2 - Create folder, job, wait for build, and delete \u00b6 The following bash script uses yojenkins to do the following: Create a new folder named Test Folder Create a new job named Test Job inside Test Folder Start a new build for job Test Job Wait for the build to leave the queue and start running Wait for the job to finish Code #!/bin/bash echo echo 'Creating \"Test Folder\" folder ...' yojenkins folder create --type folder \"Test Folder\" . echo echo 'Creating \"Test Job\" job in \"Test Folder\" folder ...' yojenkins job create \"Test Job\" \"Test Folder\" echo echo 'Building \"Test Job\" job ...' next_build_number=$(yojenkins job next \"Test Folder/Test Job\") yojenkins job build \"Test Folder/Test Job\" echo echo 'Waiting for the \"Test Job\" Job to leave the queue and start running ...' while [ true ]; do last_build_number=$(yojenkins job last \"Test Folder/Test Job\") difference=$((last_build_number - next_build_number)) if [ $difference == 0 ]; then echo break fi echo -n '.' sleep 1 done echo \"'Test Job' build $last_build_number has started running\" echo echo \"Waiting for job 'Test Job', build $last_build_number to finish ...\" build_number=$(yojenkins job last \"Test Folder/Test Job\") SUCCESS=\"\" while [ \"$SUCCESS\" != \"SUCCESS\" ]; do SUCCESS=$(yojenkins build status \"Test Folder/Test Job\" --number $last_build_number) echo -n '.' sleep 1 done echo echo \"Finished job 'Test Job', build $build_number, with SUCCESS status\" echo echo \"Deleting 'Test Job' job and 'Test Folder' folder ...\" yojenkins job delete \"Test Folder/Test Job\" yojenkins folder delete \"Test Folder\" Output Creating \"Test Folder\" folder ... success Creating \"Test Job\" job in \"Test Folder\" folder ... success Building \"Test Job\" job ... success. queue number: 133 Waiting for the \"Test Job\" Job to leave the queue and start running ... ..... 'Test Job' build 1 has started running Waiting for job 'Test Job', build 1 to finish ... . Finished job 'Test Job', build 1, with SUCCESS status Deleting 'Test Job' job and 'Test Folder' folder ... success success Example 3 - Search for job on two servers, delete if found \u00b6 The following bash script uses yojenkins to search all jobs on two different Jenkins server. If it is found, delete it. Code TODO Output TODO Example 4 - Creating a User \u00b6 This bash script uses yojenkins to set up a new user account and assign them the right permissions. Code TODO Output TODO Example 5 - Creating a Credential \u00b6 This bash script uses yojenkins to create a new user/passoword credential. It generates a configuration file template, assigns template variables, and then creates the new credential. Code #!/bin/bash # Define varaibles to be plugged into the credntial template CRED_SCOPE_DOMAIN=\"global\" CRED_ID=\"area-51-access\" CRED_DESCRIPTION=\"Credential used as an example\" CRED_USERNAME=\"area-51-user\" CRED_PASSWORD=\"T0P_sEcReT\" CRED_USERNAME_AS_SECRET=false # Generate the credential template CRED_CONFIG_TEMPLATE=$(yojenkins credential get-template user-pass --filepath example-cred-config.xml) # Interpolate (Plug in) the variables into the template CRED_CONFIG=\"$(eval \"echo -e \\\"`<example-cred-config.xml`\\\"\")\" # Save it back to file echo \"$CRED_CONFIG\" > example-cred-config.xml # Create the credential using the interpolated file yojenkins credential create example-cred-config.xml echo \"Successfully created credential '$CRED_ID'\" Output Successfully created credential 'area-51-access' Example 6 - Add a Permission to All Users \u00b6 Code TODO Output TODO Example 7 - Find a User with a Specific Permission \u00b6 Code TODO Output TODO","title":"Scripting Examples"},{"location":"scripting_examples/#scripting-examples","text":"Scripting Examples Example 1 - Create job, wait for build, search logs Example 2 - Create folder, job, wait for build, and delete Example 3 - Search for job on two servers, delete if found Example 4 - Creating a User Example 5 - Creating a Credential Example 6 - Add a Permission to All Users Example 7 - Find a User with a Specific Permission Note For clarity, all of the following script examples are for simplified use cases. More advanced use cases may require additional logic and error handling.","title":"Scripting Examples"},{"location":"scripting_examples/#example-1-create-job-wait-for-build-search-logs","text":"Here we use a bash script with yojenkins to do the following: Create a new job using a predefined JSON configuration file Start a new build for the job Wait 12 seconds for the build to start and finish Search the build log for the string \"Hello beautiful world!\" Tip Within the job configuration XML definition, notice how variable usage is escaped with \\ to avoid variable interpretation. Here specifically, using $VARIABLE instead of \\$VARIABLE would cause the variable to be interpreted as a local variable name and not as a string. Code #!/bin/bash JOB_NAME=\"Example Job\" SEARCH_TEXT=\"Hello world\" # Define the Job configuration cat > EXAMPLE_JOB_CONFIG.xml << EOF <?xml version='1.1' encoding='UTF-8'?> <project> <scm class=\"hudson.scm.NullSCM\" /> <builders> <hudson.tasks.Shell> <command> for VARIABLE in \"yall\" \"people\" \"world\" do echo \"Hello \\$VARIABLE\" done </command> <configuredLocalRules /> </hudson.tasks.Shell> </builders> </project> EOF echo echo \"Creating '$JOB_NAME' job in Jenkins root folder ...\" yojenkins job create \\ --config-file EXAMPLE_JOB_CONFIG.xml \\ \"$JOB_NAME\" . echo echo \"Building '$JOB_NAME' job ...\" yojenkins job build \"$JOB_NAME\" echo echo \"Waiting 12 seconds for job to build and complete ...\" sleep 12 echo echo \"Checking build logs for substring '$SEARCH_TEXT' ...\" BUILD_LOGS=$(yojenkins build logs \"$JOB_NAME\" --latest) if [[ \"$BUILD_LOGS\" == *\"$SEARCH_TEXT\"* ]]; then echo \"Successfully found text '$SEARCH_TEXT' in build logs\" else echo \"Failed to find text '$SEARCH_TEXT' in build logs\" exit 1 fi Output Creating 'Example Job' job in Jenkins root folder ... success Building 'Example Job' job ... success. queue number: 131 Waiting 12 seconds for job to build and complete ... Checking build logs for substring 'Hello world' ... Successfully found text 'Hello world'!","title":"Example 1 - Create job, wait for build, search logs"},{"location":"scripting_examples/#example-2-create-folder-job-wait-for-build-and-delete","text":"The following bash script uses yojenkins to do the following: Create a new folder named Test Folder Create a new job named Test Job inside Test Folder Start a new build for job Test Job Wait for the build to leave the queue and start running Wait for the job to finish Code #!/bin/bash echo echo 'Creating \"Test Folder\" folder ...' yojenkins folder create --type folder \"Test Folder\" . echo echo 'Creating \"Test Job\" job in \"Test Folder\" folder ...' yojenkins job create \"Test Job\" \"Test Folder\" echo echo 'Building \"Test Job\" job ...' next_build_number=$(yojenkins job next \"Test Folder/Test Job\") yojenkins job build \"Test Folder/Test Job\" echo echo 'Waiting for the \"Test Job\" Job to leave the queue and start running ...' while [ true ]; do last_build_number=$(yojenkins job last \"Test Folder/Test Job\") difference=$((last_build_number - next_build_number)) if [ $difference == 0 ]; then echo break fi echo -n '.' sleep 1 done echo \"'Test Job' build $last_build_number has started running\" echo echo \"Waiting for job 'Test Job', build $last_build_number to finish ...\" build_number=$(yojenkins job last \"Test Folder/Test Job\") SUCCESS=\"\" while [ \"$SUCCESS\" != \"SUCCESS\" ]; do SUCCESS=$(yojenkins build status \"Test Folder/Test Job\" --number $last_build_number) echo -n '.' sleep 1 done echo echo \"Finished job 'Test Job', build $build_number, with SUCCESS status\" echo echo \"Deleting 'Test Job' job and 'Test Folder' folder ...\" yojenkins job delete \"Test Folder/Test Job\" yojenkins folder delete \"Test Folder\" Output Creating \"Test Folder\" folder ... success Creating \"Test Job\" job in \"Test Folder\" folder ... success Building \"Test Job\" job ... success. queue number: 133 Waiting for the \"Test Job\" Job to leave the queue and start running ... ..... 'Test Job' build 1 has started running Waiting for job 'Test Job', build 1 to finish ... . Finished job 'Test Job', build 1, with SUCCESS status Deleting 'Test Job' job and 'Test Folder' folder ... success success","title":"Example 2 - Create folder, job, wait for build, and delete"},{"location":"scripting_examples/#example-3-search-for-job-on-two-servers-delete-if-found","text":"The following bash script uses yojenkins to search all jobs on two different Jenkins server. If it is found, delete it. Code TODO Output TODO","title":"Example 3 - Search for job on two servers, delete if found"},{"location":"scripting_examples/#example-4-creating-a-user","text":"This bash script uses yojenkins to set up a new user account and assign them the right permissions. Code TODO Output TODO","title":"Example 4 - Creating a User"},{"location":"scripting_examples/#example-5-creating-a-credential","text":"This bash script uses yojenkins to create a new user/passoword credential. It generates a configuration file template, assigns template variables, and then creates the new credential. Code #!/bin/bash # Define varaibles to be plugged into the credntial template CRED_SCOPE_DOMAIN=\"global\" CRED_ID=\"area-51-access\" CRED_DESCRIPTION=\"Credential used as an example\" CRED_USERNAME=\"area-51-user\" CRED_PASSWORD=\"T0P_sEcReT\" CRED_USERNAME_AS_SECRET=false # Generate the credential template CRED_CONFIG_TEMPLATE=$(yojenkins credential get-template user-pass --filepath example-cred-config.xml) # Interpolate (Plug in) the variables into the template CRED_CONFIG=\"$(eval \"echo -e \\\"`<example-cred-config.xml`\\\"\")\" # Save it back to file echo \"$CRED_CONFIG\" > example-cred-config.xml # Create the credential using the interpolated file yojenkins credential create example-cred-config.xml echo \"Successfully created credential '$CRED_ID'\" Output Successfully created credential 'area-51-access'","title":"Example 5 - Creating a Credential"},{"location":"scripting_examples/#example-6-add-a-permission-to-all-users","text":"Code TODO Output TODO","title":"Example 6 - Add a Permission to All Users"},{"location":"scripting_examples/#example-7-find-a-user-with-a-specific-permission","text":"Code TODO Output TODO","title":"Example 7 - Find a User with a Specific Permission"},{"location":"support/","text":"Support this Project! \u00b6 Support this Project! Financial Support How Can I Sponsor? What Do I Get Back? What Will Happen to Your Money? Marketing Support Big Thank You Any support for this project is much appreciated! Financial Support \u00b6 As of now, your financial sponsorship is important to me because it gives me the affirmation to keep pushing code into the public view. Although these sponsorships probably will not make me a ton of money or let me quit my day job any time soon, it will give me the additional motivation and drive to contribute to the open source community. How Can I Sponsor? \u00b6 The following methods are available to financially support this project: GitHub Sponsor GitHub offers a way to support with a monthly or a one-time sponsorship . You can become a sponsor with recurruing donations or you can simply become a sponsor with a one-time donation. Buy Me Coffee This is a popular way to support developers, creaters, and maintainers of projects Essentially, it is a quick and subdle way to support the project by \"buying me a coffee\" with a one-time donation . What Do I Get Back? \u00b6 Depending on the size of the donation, you or your company are able to get the following: TODO: Add a list of what you get back, a table What Will Happen to Your Money? \u00b6 As of now, with your sponsorship, I will probably buy more tea and various snacks. Or I will just sponsor someone else's project that I believe is worth sponsoring. Marketing Support \u00b6 Typically, getting any kind of project out there and somewhat popular is a challenge these days. It would be pretty awesome if you could help me out by spreading the word about yojenkins . This not only helps me to keep the project alive, but also helps me find out how people use it and what they would like to see in the future of yojenkins . Spread the word about yojenkins though social media, blogs, and other channels. This includes Twitter, Facebook, LinkedIn, Medium, Reddit, or any other public or private social media Simply link the yojenkins GitHub repository to a social media post.","title":"Support this Project!"},{"location":"support/#support-this-project","text":"Support this Project! Financial Support How Can I Sponsor? What Do I Get Back? What Will Happen to Your Money? Marketing Support Big Thank You Any support for this project is much appreciated!","title":"Support this Project!"},{"location":"support/#financial-support","text":"As of now, your financial sponsorship is important to me because it gives me the affirmation to keep pushing code into the public view. Although these sponsorships probably will not make me a ton of money or let me quit my day job any time soon, it will give me the additional motivation and drive to contribute to the open source community.","title":"Financial Support"},{"location":"support/#how-can-i-sponsor","text":"The following methods are available to financially support this project: GitHub Sponsor GitHub offers a way to support with a monthly or a one-time sponsorship . You can become a sponsor with recurruing donations or you can simply become a sponsor with a one-time donation. Buy Me Coffee This is a popular way to support developers, creaters, and maintainers of projects Essentially, it is a quick and subdle way to support the project by \"buying me a coffee\" with a one-time donation .","title":"How Can I Sponsor?"},{"location":"support/#what-do-i-get-back","text":"Depending on the size of the donation, you or your company are able to get the following: TODO: Add a list of what you get back, a table","title":"What Do I Get Back?"},{"location":"support/#what-will-happen-to-your-money","text":"As of now, with your sponsorship, I will probably buy more tea and various snacks. Or I will just sponsor someone else's project that I believe is worth sponsoring.","title":"What Will Happen to Your Money?"},{"location":"support/#marketing-support","text":"Typically, getting any kind of project out there and somewhat popular is a challenge these days. It would be pretty awesome if you could help me out by spreading the word about yojenkins . This not only helps me to keep the project alive, but also helps me find out how people use it and what they would like to see in the future of yojenkins . Spread the word about yojenkins though social media, blogs, and other channels. This includes Twitter, Facebook, LinkedIn, Medium, Reddit, or any other public or private social media Simply link the yojenkins GitHub repository to a social media post.","title":"Marketing Support"},{"location":"usage/","text":"Usage \u00b6 Usage CLI Basics Menu Overview Authentication Authentication Profiles Configuring a Profile Run yojenkins auth configure (Recommended) Manually edit the ~/.yojenkins/credentials file directly Requesting and Storing API Tokens Order of Precedence Specifying Profiles Output Formatting Live Monitoring Job Monitor Build Monitor Tools Command History Generic REST Server Requests Run Groovy Script on Server Setup Jenkins Shared Library Local Jenkins Server Setup Using Docker Deploying the Local Jenkins Server Tearing Down the Local Jenkins Server CLI Basics \u00b6 As with other command line interface (CLI) tools, the format of a typical yojenkins CLI interaction looks like this: yojenkins <command> <subcommand> [options] [ARGUMENTS] Here [optoins] are flags that do not have to be specified. For example, --yaml is a common option. [ARGUMENTS] are documneted as uppder case and must be specified for the command. For example, yojenkins folder info [OPTIONS] FOLDER , where folder name/URL are required. To look up any command and sub-command help documentation, supplement the command with --help . For example, yojenkins auth configure --help Tip To troubleshoot any issues or to see what yojenkins is doing behind the scenes, use the --debug option Menu Overview \u00b6 The following is the main menu displayed when running yojenkins --help . \u276f yojenkins --help YOJENKINS (Version: 0.0.00) yojenkins is a tool that is focused on interfacing with a Jenkins server from the comfort of the beloved command line. This tool can also be used as a middleware utility, generating and passing Jenkins information or automating tasks. QUICK START: 1. Configure yo profile: yojenkins auth configure 2. Add yo API token: yojenkins auth token --profile <PROFILE NAME> 3. Verify yo creds: yojenkins auth verify 4. Explore yojenkins Options: -v, --version Show the version --help Show this message and exit. Commands: account Manage user accounts auth Manage authentication and profiles build Manage builds credential Manage credentials folder Manage folders job Manage jobs node Manage nodes server Manage server stage Manage build stages step Manage stage steps tools Tools and more The sub-menus can be accessed by entering yojenkins followed by the sub-menu name. For example, yojenkins server will display the server sub-menu. \u276f yojenkins server --help Usage: yojenkins server [OPTIONS] COMMAND [ARGS]... Server Management Options: --help Show this message and exit. Commands: browser Open server home page in web browser info Server information people Show all people/users on server plugins Show plugin information queue Show current job build queues on server quiet Server quite mode enable/disable reachable Check if server is reachable restart Restart the server server-deploy Create a local development server using Docker server-teardown Remove a local development server shutdown Shut down the server In turn, the sub-menu commands can be accessed by entering yojenkins server followed by the sub-menu command name. For example, yojenkins server browser will open the Jenkins server home page in the browser. Note Some commands may be greyed out. These commands are not yet implemented. Of course you can view the help menu for the sub-menu's commands by adding --help . For example, yojenkins server browser --help will display the help menu for the browser \u276f yojenkins server browser --help Usage: yojenkins server browser [OPTIONS] Open server home page in web browser Options: --debug Enable debug level log messages --profile TEXT Authentication profile for command --help Show this message and exit. Authentication \u00b6 Effortless authentication is something that yojenkins can do for you. That is, once you have authentication profiles set up, it is not something you have to think about much while using yojenkins . Authentication Profiles \u00b6 yojenkins has the ability to store and manage authentication profiles. That is, you are able to store and manage different authentication credentials and use them to authenticate with the Jenkins server as you need them, without having to enter them each time you need to interact with each Jenkins server. Different authentication profiles can be used for different Jenkins servers. For example, you can have a profile for your local development server and a profile for your production Jenkins server. You can also have different authentication profiles for different Jenkins user accounts. For example, you may have a profile for an Jenkins administrator and a profile for a regular user. Authentication profiles are stored in your local ~/.yojenkins directory inside the credentials file. The credentials file is a TOML file that contains a list of authentication profiles. Remember that the ~ is a shorthand for the user's home directory. Note Authentication profiles work very similar to that of AWS CLI, storing credentials locally inside the ~/.aws/credentials file. The ~/.yojenkins directory and the credentials file can be manually created, however, yojenkins will create these files for you if they do not exist. An example of the contents of the credentials file looks like this: [default] jenkins_server_url = \"https://cool-company.jenkins.com\" username = \"id236\" api_token = \"11fb9cb61d34edfe73f82763cf8879c79a\" active = true [test-server] jenkins_server_url = \"http://localhost:8080\" username = \"admin\" api_token = \"55fg9cb61d34edfe83f82763cf8879c70v\" active = true Note the different profile names in the credentials file. The first profile is default . This is the profile that is used when no other profile is specified. If available, the default profile is automatically activated when the yojenkins command is run. The profile sections are as follows: jenkins_server_url : The full URL of the Jenkins server's home page. username : The username of the Jenkins user account. api_token : The API token of the Jenkins user account. This can be fetched through the Jenkins server UI, or through yojenkins active : Whether the profile can be used or not. This can be useful if you want to temporarily disable a profile and ensure that you don't accidentally use it. Caution The api_token can be the account password, however it is highly recommended that you use an API token. You do not want to store a Jenkins account password in plain text. Configuring a Profile \u00b6 To use an authentication profile you need to first create a profile. For example, to create a profile for your local development server, you can do one of the following two methods. Run yojenkins auth configure (Recommended) \u00b6 Running this command will prompt you for the required information, The prompt will look something like the following: \u276f yojenkins auth configure Credentials profile file found in current user home directory: /home/user/.yojenkins/credentials Adding a new profile to the current credentials profile file ... Please enter the following information to add a profile: [ OPTIONAL ] Enter PROFILE NAME (default): demo-profile [ REQUIRED ] Enter Jenkins SERVER BASE URL: http://demo.jenkins.com [ REQUIRED ] Enter USERNAME: demo_user [ OPTIONAL ] Enter API TOKEN: Successfully configured credentials file You can leave the API token blank since you can use yojenkins to add the API token later. Caution The profile name is optional because if you do not enter anything for this item, the profile will be named default and overwrite any existing default profile with the same name. Manually edit the ~/.yojenkins/credentials file directly \u00b6 Alternatively, you can manually edit the ~/.yojenkins/credentials file directly. The file is in TOML file format. Each profile will have the following information structure: [demo-profile] jenkins_server_url = \"http://demo.jenkins.com\" username = \"demo_user\" api_token = \"\" active = true The active field is used to determine whether the profile can be used or not. If you want to temporarily disable a profile, you can set the active field to false . You can leave the API token blank since you can use yojenkins to add the API token later. Requesting and Storing API Tokens \u00b6 yojenkins is able to request an API token from the Jenkins server to use for subsequent authentication requests. To simply generate and display the API token, you can run the following command. Note that yojenkins does not reference a profile, so it will ask a few question to be able to generate the API token. \u276f yojenkins auth token Enter desired API TOKEN NAME: demo-test Enter Jenkins SERVER BASE URL: http://localhost:8080/ Enter Jenkins server USERNAME: admin Enter \"admin\" PASSWORD: 55d8c325c876fake58d61274d41744bc0d More conveniently, you can generate an API token using the information stored in a authentication profile and subsequently store the new API token inside an existing authentication profile. The following command will request a new API token from the server and store it within the default under the api_token key. \u276f yojenkins auth token --profile default Enter \"admin\" PASSWORD: success Tip You can also manually fetch the API token form the Jenkins UI: Click on your username in the top right corner of the Jenkins UI Click on the \"Configure\" button in the menu on the right In the \"API Token\" section, click \"Add new Token\" Copy the generated API token and paste it into the api_token field in the ~/.yojenkins/credentials file Order of Precedence Specifying Profiles \u00b6 Each time yojenkins is run, it will look for a way to determine which authentication profile to use. The order of precedence of looking for a profile specifier is as follows: --profile command argument The --profile command argument specifies the profile name, the profile specified by the argument will be used. Example: yojenkins server info --profile my-profile Environment variable YOJENKINS_PROFILE Example: export YOJENKINS_PROFILE=my-profile \"default\" profile in the ~/.yojenkins/credentials file First active profile in the ~/.yojenkins/credentials file If none of the above are satisfied, yojenkins will prompt for Jenkins server credentials. Output Formatting \u00b6 Often times you will want to see the output of a command in a different format. For example, you may want to see the output of a yojenkins server info command in a different format than the default. The following output formats are supported: JSON YAML TOML XML Any output with any format can be supplemented with --pretty to make the output more readable. Here are some examples of how different output formats looks like using the yojenkins account list command: Default \u276f yojenkins account list [{\"id\": \"admin\", \"me\": true, \"fullName\": \"admin\", \"description\": \"\", \"absoluteUrl\": \"http://localhost:8080/user/admin\", \"userFolder\": {\"directory\": true, \"file\": false, \"freeSpace\": 18083065856, \"invalid\": false, \"canonicalPath\": \"/var/jenkins_home/users/admin_6787401061636913615\", \"usableSpace\": 16512360448, \"hidden\": false, \"totalSpace\": 30525820928, \"path\": \"/var/jenkins_home/users/admin_6787401061636913615\", \"name\": \"admin_6787401061636913615\", \"prefixLength\": 1, \"absolute\": true, \"absolutePath\": \"/var/jenkins_home/users/admin_6787401061636913615\", \"parent\": \"/var/jenkins_home/users\"}, \"isAdmin\": true, \"isManager\": true, \"isSystemRead\": true, \"canRead\": true, \"canWrite\": true, \"canUpdate\": true, \"canDelete\": true, \"canConfigure\": true, \"authorities\": [], \"lastGrantedAuthoritiesChanged\": \"Mon Nov 15 14:19:08 UTC 2021\"}] Pretty Formatting \u276f yojenkins account list --pretty [ { \"absoluteUrl\": \"http://localhost:8080/user/admin\", \"authorities\": [], --- SNIP --- \"lastGrantedAuthoritiesChanged\": \"Mon Nov 15 14:19:08 UTC 2021\", \"me\": true, \"userFolder\": { \"absolute\": true, \"absolutePath\": \"/var/jenkins_home/users/admin_6787401061636913615\", --- SNIP --- \"totalSpace\": 30525820928, \"usableSpace\": 16512339968 } } ] YAML \u276f yojenkins account list --yaml - absoluteUrl: http://localhost:8080/user/admin authorities: [] --- SNIP --- lastGrantedAuthoritiesChanged: Mon Nov 15 14:19:08 UTC 2021 me: true userFolder: absolute: true absolutePath: /var/jenkins_home/users/admin_6787401061636913615 --- SNIP --- totalSpace: 30525820928 usableSpace: 16620826624 TOML \u276f yojenkins account list --toml [[item]] id = \"admin\" me = true --- SNIP --- authorities = [] lastGrantedAuthoritiesChanged = \"Mon Nov 15 14:19:08 UTC 2021\" [item.userFolder] directory = true file = false freeSpace = 18191482880 --- SNIP --- absolutePath = \"/var/jenkins_home/users/admin_6787401061636913615\" parent = \"/var/jenkins_home/users\" XML \u276f yojenkins account list --xml --pretty <?xml version=\"1.0\" ?> <None> <item> <id>admin</id> <me>True</me> <fullName>admin</fullName> <description/> <absoluteUrl>http://localhost:8080/user/admin</absoluteUrl> <userFolder> <directory>True</directory> --- SNIP --- <absolutePath>/var/jenkins_home/users/admin_6787401061636913615</absolutePath> <parent>/var/jenkins_home/users</parent> </userFolder> <isAdmin>True</isAdmin> --- SNIP --- <authorities/> <lastGrantedAuthoritiesChanged>Mon Nov 15 14:19:08 UTC 2021</lastGrantedAuthoritiesChanged> </item> </None> Live Monitoring \u00b6 Sometimes you would like to keep a watch on a Job, monitoring the status of its builds, or a specific Build, monitoring its steps or status. yojenkins makes this possible with a CLI-based user interface for job and build monitoring. Job Monitor \u00b6 TODO Build Monitor \u00b6 TODO Tools \u00b6 Command History \u00b6 By default, each time you run a yojenkins command, that command is logged to the ~/.yojenkins/history file. If the file does not exist, it will be created. This file is essentially a JSON file which holds the following meta data for each command: The profile used for the command yojenkins path Command arguments Timestamp Formatted datatime The version of the yojenkins used to run the command To show the history of commands, run yojenkins tools history . To only show the history of a specific profile, run yojenkins tools history --profile <PROFILE NAME> . Here is a sample output of the yojenkins tools history command: \u276f yojenkins tools history [default] [Tuesday, December 28, 2021 10:34:58] [v0.0.00] - yojenkins server info --debug [default] [Tuesday, December 28, 2021 10:35:54] [v0.0.00] - yojenkins account list [default] [Tuesday, December 28, 2021 10:36:15] [v0.0.00] - yojenkins credential get-template user-pass --json --pretty [demo-profile] [Tuesday, December 28, 2021 10:38:45] [v0.0.00] - yojenkins account list [demo-profile] [Tuesday, December 28, 2021 10:39:05] [v0.0.00] - yojenkins server info Clearing the entire yojenkins history file, run yojenkins tools history --clear . Generic REST Server Requests \u00b6 Sometimes yojenkins does not support a specific request to the server. For example, if there is a new or complex REST request you may want to use, you can use the yojenkins tools rest-request command The convenience of this command is that it will automatically use your authentication profile to make the request. It will know to use the host, username, and password from your authentication profile. For example, given the following authentication profile: [default] jenkins_server_url = \"https://cool-company.jenkins.com\" username = \"id236\" api_token = \"11fb9cb61d34FAKE73f82763cf8879c79a\" active = true The command yojenkins tools rest-request \"me/api/json\" will make a GET request to the Jenkins server at http://localhost:8080/me/api/json using the username and API token from the authentication profile. This command supports the following options: --request-type - Type of REST request. Default is GET . --raw - If set, the response will be printed as raw text. The response will not be parsed as JSON. --clean-html - If set, the response will be cleaned of HTML tags. This is useful if the response is in HTML format and you only want the content. Run Groovy Script on Server \u00b6 Often times you want to run a Groovy script on the Jenkins server. The yojenkins tools run-script command allows you to do just that. This may be useful for Jenkins administrative tasks or simply running Groovy test scripts and tutorials. You can specify the Groovy script by using one of the following options: --text <SCRIPT TEXT> The Groovy script is specified as a string within the command. Example: yojenkins tools run-script --text 'println(\"Hello fun world\")' --file <SCRIPT FILE PATH> The Groovy script is specified as a file path. Example: yojenkins tools run-script --file /path/to/script.groovy Attention In order to run a Groovy script, you must have the appropriate permissions on the Jenkins server for the user account you are using. Setup Jenkins Shared Library \u00b6 Jenkins allows users to share Groovy code libraries between jobs and pipelines. This is useful in that projects and pipelines will often share the same code. For example, a piece of code used to report test results may be used in more than one pipeline without copy-pasting it into each pipeline. Shared libraries are a way to share code between projects and pipelines. Danger Jenkins sharable libraries available to any Pipeline jobs running on this system. These libraries will be fully trusted, meaning they run code without \u201csandbox\u201d restrictions and may use @Grab. So be careful what code is being added to a Jenkins shared library. yojenkins provides a command to setup a shared library using the following command: yojenkins tools shared-lib-setup This command provides options to specify shared library setup options such as the git repository in which the shared library is stored, git branch name, and if the shared library is loaded implicitly. As of now, the only git repository that is supported by yojenkins is GitHub. Local Jenkins Server Setup Using Docker \u00b6 yojenkins offers an easy way to quickly set up a local Jenkins server within a Docker container. This containerized server is set up and ready to go to use to test yojenkins . Warning The locally containerized server set up using server-deploy is for development, training, demonstration, or testing purposes only. Do not use this server for any production environments. Note For the locally containerized server to work, you must have Docker installed and running. See Docker installation guide on how to install Docker. Deploying the Local Jenkins Server \u00b6 Run the following yojenkins command to set up a local and containerized Jenkins server. yojenkins server server-deploy If this is the very first time running this command, it will take a minute or two to complete. Any subsequent time will be faster since the base image has already been downloaded. This initial lag is due to the Docker image being downloaded and built. Note that this command can be run without any specified options or arguments. All default options should work out of the box. However, you can use the --help option to see all available options in order to change any defaults. Here are some examples of how to use the server-deploy command: Use the Blue Ocean Jenkins Docker base image yojenkins server server-deploy --image-base jenkinsci/blueocean Change the default username and password yojenkins server server-deploy --admin-user ismet --password Abc123 Use a different Jenkins configuration as code file yojenkins server server-deploy --config-file /path/to/config_as_code.yaml Use a custom list of plugins to create a Jenkins server yojenkins server server-deploy --plugins-file /path/to/plugins.txt Tearing Down the Local Jenkins Server \u00b6 In order to tear down the local and containerized Jenkins server, run the following yojenkins command: yojenkins server server-teardown Behind the scenes yojenkins holds a log file which outlines any active deployments, its image used, container created, volume created, etc. When you run server-teardown it will remove the server deployment that was logged and the log file itself. If there are any issues tearing down a running yojenkins deployed server, you can always use docker to manually remove the stop and remove the server container. docker container ls docker kill <CONTAINER ID> docker container rm <CONTAINER ID>","title":"Usage"},{"location":"usage/#usage","text":"Usage CLI Basics Menu Overview Authentication Authentication Profiles Configuring a Profile Run yojenkins auth configure (Recommended) Manually edit the ~/.yojenkins/credentials file directly Requesting and Storing API Tokens Order of Precedence Specifying Profiles Output Formatting Live Monitoring Job Monitor Build Monitor Tools Command History Generic REST Server Requests Run Groovy Script on Server Setup Jenkins Shared Library Local Jenkins Server Setup Using Docker Deploying the Local Jenkins Server Tearing Down the Local Jenkins Server","title":"Usage"},{"location":"usage/#cli-basics","text":"As with other command line interface (CLI) tools, the format of a typical yojenkins CLI interaction looks like this: yojenkins <command> <subcommand> [options] [ARGUMENTS] Here [optoins] are flags that do not have to be specified. For example, --yaml is a common option. [ARGUMENTS] are documneted as uppder case and must be specified for the command. For example, yojenkins folder info [OPTIONS] FOLDER , where folder name/URL are required. To look up any command and sub-command help documentation, supplement the command with --help . For example, yojenkins auth configure --help Tip To troubleshoot any issues or to see what yojenkins is doing behind the scenes, use the --debug option","title":"CLI Basics"},{"location":"usage/#menu-overview","text":"The following is the main menu displayed when running yojenkins --help . \u276f yojenkins --help YOJENKINS (Version: 0.0.00) yojenkins is a tool that is focused on interfacing with a Jenkins server from the comfort of the beloved command line. This tool can also be used as a middleware utility, generating and passing Jenkins information or automating tasks. QUICK START: 1. Configure yo profile: yojenkins auth configure 2. Add yo API token: yojenkins auth token --profile <PROFILE NAME> 3. Verify yo creds: yojenkins auth verify 4. Explore yojenkins Options: -v, --version Show the version --help Show this message and exit. Commands: account Manage user accounts auth Manage authentication and profiles build Manage builds credential Manage credentials folder Manage folders job Manage jobs node Manage nodes server Manage server stage Manage build stages step Manage stage steps tools Tools and more The sub-menus can be accessed by entering yojenkins followed by the sub-menu name. For example, yojenkins server will display the server sub-menu. \u276f yojenkins server --help Usage: yojenkins server [OPTIONS] COMMAND [ARGS]... Server Management Options: --help Show this message and exit. Commands: browser Open server home page in web browser info Server information people Show all people/users on server plugins Show plugin information queue Show current job build queues on server quiet Server quite mode enable/disable reachable Check if server is reachable restart Restart the server server-deploy Create a local development server using Docker server-teardown Remove a local development server shutdown Shut down the server In turn, the sub-menu commands can be accessed by entering yojenkins server followed by the sub-menu command name. For example, yojenkins server browser will open the Jenkins server home page in the browser. Note Some commands may be greyed out. These commands are not yet implemented. Of course you can view the help menu for the sub-menu's commands by adding --help . For example, yojenkins server browser --help will display the help menu for the browser \u276f yojenkins server browser --help Usage: yojenkins server browser [OPTIONS] Open server home page in web browser Options: --debug Enable debug level log messages --profile TEXT Authentication profile for command --help Show this message and exit.","title":"Menu Overview"},{"location":"usage/#authentication","text":"Effortless authentication is something that yojenkins can do for you. That is, once you have authentication profiles set up, it is not something you have to think about much while using yojenkins .","title":"Authentication"},{"location":"usage/#authentication-profiles","text":"yojenkins has the ability to store and manage authentication profiles. That is, you are able to store and manage different authentication credentials and use them to authenticate with the Jenkins server as you need them, without having to enter them each time you need to interact with each Jenkins server. Different authentication profiles can be used for different Jenkins servers. For example, you can have a profile for your local development server and a profile for your production Jenkins server. You can also have different authentication profiles for different Jenkins user accounts. For example, you may have a profile for an Jenkins administrator and a profile for a regular user. Authentication profiles are stored in your local ~/.yojenkins directory inside the credentials file. The credentials file is a TOML file that contains a list of authentication profiles. Remember that the ~ is a shorthand for the user's home directory. Note Authentication profiles work very similar to that of AWS CLI, storing credentials locally inside the ~/.aws/credentials file. The ~/.yojenkins directory and the credentials file can be manually created, however, yojenkins will create these files for you if they do not exist. An example of the contents of the credentials file looks like this: [default] jenkins_server_url = \"https://cool-company.jenkins.com\" username = \"id236\" api_token = \"11fb9cb61d34edfe73f82763cf8879c79a\" active = true [test-server] jenkins_server_url = \"http://localhost:8080\" username = \"admin\" api_token = \"55fg9cb61d34edfe83f82763cf8879c70v\" active = true Note the different profile names in the credentials file. The first profile is default . This is the profile that is used when no other profile is specified. If available, the default profile is automatically activated when the yojenkins command is run. The profile sections are as follows: jenkins_server_url : The full URL of the Jenkins server's home page. username : The username of the Jenkins user account. api_token : The API token of the Jenkins user account. This can be fetched through the Jenkins server UI, or through yojenkins active : Whether the profile can be used or not. This can be useful if you want to temporarily disable a profile and ensure that you don't accidentally use it. Caution The api_token can be the account password, however it is highly recommended that you use an API token. You do not want to store a Jenkins account password in plain text.","title":"Authentication Profiles"},{"location":"usage/#configuring-a-profile","text":"To use an authentication profile you need to first create a profile. For example, to create a profile for your local development server, you can do one of the following two methods.","title":"Configuring a Profile"},{"location":"usage/#run-yojenkins-auth-configure-recommended","text":"Running this command will prompt you for the required information, The prompt will look something like the following: \u276f yojenkins auth configure Credentials profile file found in current user home directory: /home/user/.yojenkins/credentials Adding a new profile to the current credentials profile file ... Please enter the following information to add a profile: [ OPTIONAL ] Enter PROFILE NAME (default): demo-profile [ REQUIRED ] Enter Jenkins SERVER BASE URL: http://demo.jenkins.com [ REQUIRED ] Enter USERNAME: demo_user [ OPTIONAL ] Enter API TOKEN: Successfully configured credentials file You can leave the API token blank since you can use yojenkins to add the API token later. Caution The profile name is optional because if you do not enter anything for this item, the profile will be named default and overwrite any existing default profile with the same name.","title":"Run yojenkins auth configure (Recommended)"},{"location":"usage/#manually-edit-the-yojenkinscredentials-file-directly","text":"Alternatively, you can manually edit the ~/.yojenkins/credentials file directly. The file is in TOML file format. Each profile will have the following information structure: [demo-profile] jenkins_server_url = \"http://demo.jenkins.com\" username = \"demo_user\" api_token = \"\" active = true The active field is used to determine whether the profile can be used or not. If you want to temporarily disable a profile, you can set the active field to false . You can leave the API token blank since you can use yojenkins to add the API token later.","title":"Manually edit the ~/.yojenkins/credentials file directly"},{"location":"usage/#requesting-and-storing-api-tokens","text":"yojenkins is able to request an API token from the Jenkins server to use for subsequent authentication requests. To simply generate and display the API token, you can run the following command. Note that yojenkins does not reference a profile, so it will ask a few question to be able to generate the API token. \u276f yojenkins auth token Enter desired API TOKEN NAME: demo-test Enter Jenkins SERVER BASE URL: http://localhost:8080/ Enter Jenkins server USERNAME: admin Enter \"admin\" PASSWORD: 55d8c325c876fake58d61274d41744bc0d More conveniently, you can generate an API token using the information stored in a authentication profile and subsequently store the new API token inside an existing authentication profile. The following command will request a new API token from the server and store it within the default under the api_token key. \u276f yojenkins auth token --profile default Enter \"admin\" PASSWORD: success Tip You can also manually fetch the API token form the Jenkins UI: Click on your username in the top right corner of the Jenkins UI Click on the \"Configure\" button in the menu on the right In the \"API Token\" section, click \"Add new Token\" Copy the generated API token and paste it into the api_token field in the ~/.yojenkins/credentials file","title":"Requesting and Storing API Tokens"},{"location":"usage/#order-of-precedence-specifying-profiles","text":"Each time yojenkins is run, it will look for a way to determine which authentication profile to use. The order of precedence of looking for a profile specifier is as follows: --profile command argument The --profile command argument specifies the profile name, the profile specified by the argument will be used. Example: yojenkins server info --profile my-profile Environment variable YOJENKINS_PROFILE Example: export YOJENKINS_PROFILE=my-profile \"default\" profile in the ~/.yojenkins/credentials file First active profile in the ~/.yojenkins/credentials file If none of the above are satisfied, yojenkins will prompt for Jenkins server credentials.","title":"Order of Precedence Specifying Profiles"},{"location":"usage/#output-formatting","text":"Often times you will want to see the output of a command in a different format. For example, you may want to see the output of a yojenkins server info command in a different format than the default. The following output formats are supported: JSON YAML TOML XML Any output with any format can be supplemented with --pretty to make the output more readable. Here are some examples of how different output formats looks like using the yojenkins account list command: Default \u276f yojenkins account list [{\"id\": \"admin\", \"me\": true, \"fullName\": \"admin\", \"description\": \"\", \"absoluteUrl\": \"http://localhost:8080/user/admin\", \"userFolder\": {\"directory\": true, \"file\": false, \"freeSpace\": 18083065856, \"invalid\": false, \"canonicalPath\": \"/var/jenkins_home/users/admin_6787401061636913615\", \"usableSpace\": 16512360448, \"hidden\": false, \"totalSpace\": 30525820928, \"path\": \"/var/jenkins_home/users/admin_6787401061636913615\", \"name\": \"admin_6787401061636913615\", \"prefixLength\": 1, \"absolute\": true, \"absolutePath\": \"/var/jenkins_home/users/admin_6787401061636913615\", \"parent\": \"/var/jenkins_home/users\"}, \"isAdmin\": true, \"isManager\": true, \"isSystemRead\": true, \"canRead\": true, \"canWrite\": true, \"canUpdate\": true, \"canDelete\": true, \"canConfigure\": true, \"authorities\": [], \"lastGrantedAuthoritiesChanged\": \"Mon Nov 15 14:19:08 UTC 2021\"}] Pretty Formatting \u276f yojenkins account list --pretty [ { \"absoluteUrl\": \"http://localhost:8080/user/admin\", \"authorities\": [], --- SNIP --- \"lastGrantedAuthoritiesChanged\": \"Mon Nov 15 14:19:08 UTC 2021\", \"me\": true, \"userFolder\": { \"absolute\": true, \"absolutePath\": \"/var/jenkins_home/users/admin_6787401061636913615\", --- SNIP --- \"totalSpace\": 30525820928, \"usableSpace\": 16512339968 } } ] YAML \u276f yojenkins account list --yaml - absoluteUrl: http://localhost:8080/user/admin authorities: [] --- SNIP --- lastGrantedAuthoritiesChanged: Mon Nov 15 14:19:08 UTC 2021 me: true userFolder: absolute: true absolutePath: /var/jenkins_home/users/admin_6787401061636913615 --- SNIP --- totalSpace: 30525820928 usableSpace: 16620826624 TOML \u276f yojenkins account list --toml [[item]] id = \"admin\" me = true --- SNIP --- authorities = [] lastGrantedAuthoritiesChanged = \"Mon Nov 15 14:19:08 UTC 2021\" [item.userFolder] directory = true file = false freeSpace = 18191482880 --- SNIP --- absolutePath = \"/var/jenkins_home/users/admin_6787401061636913615\" parent = \"/var/jenkins_home/users\" XML \u276f yojenkins account list --xml --pretty <?xml version=\"1.0\" ?> <None> <item> <id>admin</id> <me>True</me> <fullName>admin</fullName> <description/> <absoluteUrl>http://localhost:8080/user/admin</absoluteUrl> <userFolder> <directory>True</directory> --- SNIP --- <absolutePath>/var/jenkins_home/users/admin_6787401061636913615</absolutePath> <parent>/var/jenkins_home/users</parent> </userFolder> <isAdmin>True</isAdmin> --- SNIP --- <authorities/> <lastGrantedAuthoritiesChanged>Mon Nov 15 14:19:08 UTC 2021</lastGrantedAuthoritiesChanged> </item> </None>","title":"Output Formatting"},{"location":"usage/#live-monitoring","text":"Sometimes you would like to keep a watch on a Job, monitoring the status of its builds, or a specific Build, monitoring its steps or status. yojenkins makes this possible with a CLI-based user interface for job and build monitoring.","title":"Live Monitoring"},{"location":"usage/#job-monitor","text":"TODO","title":"Job Monitor"},{"location":"usage/#build-monitor","text":"TODO","title":"Build Monitor"},{"location":"usage/#tools","text":"","title":"Tools"},{"location":"usage/#command-history","text":"By default, each time you run a yojenkins command, that command is logged to the ~/.yojenkins/history file. If the file does not exist, it will be created. This file is essentially a JSON file which holds the following meta data for each command: The profile used for the command yojenkins path Command arguments Timestamp Formatted datatime The version of the yojenkins used to run the command To show the history of commands, run yojenkins tools history . To only show the history of a specific profile, run yojenkins tools history --profile <PROFILE NAME> . Here is a sample output of the yojenkins tools history command: \u276f yojenkins tools history [default] [Tuesday, December 28, 2021 10:34:58] [v0.0.00] - yojenkins server info --debug [default] [Tuesday, December 28, 2021 10:35:54] [v0.0.00] - yojenkins account list [default] [Tuesday, December 28, 2021 10:36:15] [v0.0.00] - yojenkins credential get-template user-pass --json --pretty [demo-profile] [Tuesday, December 28, 2021 10:38:45] [v0.0.00] - yojenkins account list [demo-profile] [Tuesday, December 28, 2021 10:39:05] [v0.0.00] - yojenkins server info Clearing the entire yojenkins history file, run yojenkins tools history --clear .","title":"Command History"},{"location":"usage/#generic-rest-server-requests","text":"Sometimes yojenkins does not support a specific request to the server. For example, if there is a new or complex REST request you may want to use, you can use the yojenkins tools rest-request command The convenience of this command is that it will automatically use your authentication profile to make the request. It will know to use the host, username, and password from your authentication profile. For example, given the following authentication profile: [default] jenkins_server_url = \"https://cool-company.jenkins.com\" username = \"id236\" api_token = \"11fb9cb61d34FAKE73f82763cf8879c79a\" active = true The command yojenkins tools rest-request \"me/api/json\" will make a GET request to the Jenkins server at http://localhost:8080/me/api/json using the username and API token from the authentication profile. This command supports the following options: --request-type - Type of REST request. Default is GET . --raw - If set, the response will be printed as raw text. The response will not be parsed as JSON. --clean-html - If set, the response will be cleaned of HTML tags. This is useful if the response is in HTML format and you only want the content.","title":"Generic REST Server Requests"},{"location":"usage/#run-groovy-script-on-server","text":"Often times you want to run a Groovy script on the Jenkins server. The yojenkins tools run-script command allows you to do just that. This may be useful for Jenkins administrative tasks or simply running Groovy test scripts and tutorials. You can specify the Groovy script by using one of the following options: --text <SCRIPT TEXT> The Groovy script is specified as a string within the command. Example: yojenkins tools run-script --text 'println(\"Hello fun world\")' --file <SCRIPT FILE PATH> The Groovy script is specified as a file path. Example: yojenkins tools run-script --file /path/to/script.groovy Attention In order to run a Groovy script, you must have the appropriate permissions on the Jenkins server for the user account you are using.","title":"Run Groovy Script on Server"},{"location":"usage/#setup-jenkins-shared-library","text":"Jenkins allows users to share Groovy code libraries between jobs and pipelines. This is useful in that projects and pipelines will often share the same code. For example, a piece of code used to report test results may be used in more than one pipeline without copy-pasting it into each pipeline. Shared libraries are a way to share code between projects and pipelines. Danger Jenkins sharable libraries available to any Pipeline jobs running on this system. These libraries will be fully trusted, meaning they run code without \u201csandbox\u201d restrictions and may use @Grab. So be careful what code is being added to a Jenkins shared library. yojenkins provides a command to setup a shared library using the following command: yojenkins tools shared-lib-setup This command provides options to specify shared library setup options such as the git repository in which the shared library is stored, git branch name, and if the shared library is loaded implicitly. As of now, the only git repository that is supported by yojenkins is GitHub.","title":"Setup Jenkins Shared Library"},{"location":"usage/#local-jenkins-server-setup-using-docker","text":"yojenkins offers an easy way to quickly set up a local Jenkins server within a Docker container. This containerized server is set up and ready to go to use to test yojenkins . Warning The locally containerized server set up using server-deploy is for development, training, demonstration, or testing purposes only. Do not use this server for any production environments. Note For the locally containerized server to work, you must have Docker installed and running. See Docker installation guide on how to install Docker.","title":"Local Jenkins Server Setup Using Docker"},{"location":"usage/#deploying-the-local-jenkins-server","text":"Run the following yojenkins command to set up a local and containerized Jenkins server. yojenkins server server-deploy If this is the very first time running this command, it will take a minute or two to complete. Any subsequent time will be faster since the base image has already been downloaded. This initial lag is due to the Docker image being downloaded and built. Note that this command can be run without any specified options or arguments. All default options should work out of the box. However, you can use the --help option to see all available options in order to change any defaults. Here are some examples of how to use the server-deploy command: Use the Blue Ocean Jenkins Docker base image yojenkins server server-deploy --image-base jenkinsci/blueocean Change the default username and password yojenkins server server-deploy --admin-user ismet --password Abc123 Use a different Jenkins configuration as code file yojenkins server server-deploy --config-file /path/to/config_as_code.yaml Use a custom list of plugins to create a Jenkins server yojenkins server server-deploy --plugins-file /path/to/plugins.txt","title":"Deploying the Local Jenkins Server"},{"location":"usage/#tearing-down-the-local-jenkins-server","text":"In order to tear down the local and containerized Jenkins server, run the following yojenkins command: yojenkins server server-teardown Behind the scenes yojenkins holds a log file which outlines any active deployments, its image used, container created, volume created, etc. When you run server-teardown it will remove the server deployment that was logged and the log file itself. If there are any issues tearing down a running yojenkins deployed server, you can always use docker to manually remove the stop and remove the server container. docker container ls docker kill <CONTAINER ID> docker container rm <CONTAINER ID>","title":"Tearing Down the Local Jenkins Server"}]}
